/**
 * AWS CLI Provisioning Service
 * Automatically provisions model access using AWS CLI commands
 */

export interface ProvisioningResult {
  success: boolean;
  message: string;
  requestedModels: string[];
  errors?: string[];
}

export interface ProvisioningOptions {
  region: string;
  reason?: string;
  dryRun?: boolean;
}

/**
 * Generate comprehensive provisioning script for model access
 */
export function generateProvisioningScript(
  modelIds: string[],
  options: ProvisioningOptions = { region: 'us-west-2' },
): string {
  const { region, reason = 'Automated access request for Nanobrowser extension', dryRun = false } = options;

  const script = `#!/bin/bash
# AWS Bedrock Model Access Provisioning Script
# Generated by Nanobrowser Extension
# Date: ${new Date().toISOString()}

set -e  # Exit on any error

echo "üöÄ Starting AWS Bedrock model access provisioning..."
echo "Region: ${region}"
echo "Models to provision: ${modelIds.length}"
echo ""

# Check AWS CLI installation
if ! command -v aws &> /dev/null; then
    echo "‚ùå AWS CLI is not installed. Please install it first:"
    echo "   https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html"
    exit 1
fi

# Check AWS credentials
if ! aws sts get-caller-identity &> /dev/null; then
    echo "‚ùå AWS credentials not configured. Please run 'aws configure' first."
    exit 1
fi

echo "‚úÖ AWS CLI and credentials verified"
echo ""

# Function to request access for a single model
request_model_access() {
    local model_id="$1"
    local provider=$(echo "$model_id" | cut -d'.' -f1)
    
    echo "üìù Requesting access for: $model_id"
    
    ${dryRun ? 'echo "[DRY RUN]"' : ''}
    
    if ${dryRun ? 'true' : 'aws bedrock put-model-access-request'} \\
        --region "${region}" \\
        --model-id "$model_id" \\
        --access-request-reason "${reason}" \\
        --output json 2>/dev/null; then
        echo "‚úÖ Access requested successfully for $model_id"
        return 0
    else
        echo "‚ö†Ô∏è  Failed to request access for $model_id (may already be requested)"
        return 1
    fi
}

# Function to check current access status
check_access_status() {
    echo "üîç Checking current model access status..."
    
    if aws bedrock list-foundation-models \\
        --region "${region}" \\
        --output table \\
        --query 'modelSummaries[?contains(modelId, \`anthropic.claude-4\`) || contains(modelId, \`anthropic.claude-sonnet-4\`) || contains(modelId, \`anthropic.claude-haiku-4\`)].{ModelId:modelId,Status:modelLifecycle.status}' 2>/dev/null; then
        echo ""
    else
        echo "‚ö†Ô∏è  Could not retrieve model status"
    fi
}

# Function to check model access requests
check_access_requests() {
    echo "üìã Checking pending access requests..."
    
    if aws bedrock list-model-access-requests \\
        --region "${region}" \\
        --output table \\
        --query 'modelAccessRequestSummaries[?status==\`PENDING\`].{ModelId:modelId,Status:status,RequestTime:requestTime}' 2>/dev/null; then
        echo ""
    else
        echo "‚ö†Ô∏è  Could not retrieve access requests"
    fi
}

# Main provisioning logic
main() {
    echo "üîç Pre-provisioning status check:"
    check_access_status
    check_access_requests
    
    echo "üöÄ Starting model access provisioning..."
    echo ""
    
    local success_count=0
    local total_count=${modelIds.length}
    
    # Request access for each model
${modelIds.map(modelId => `    request_model_access "${modelId}" && ((success_count++))`).join('\n')}
    
    echo ""
    echo "üìä Provisioning Summary:"
    echo "   Total models: $total_count"
    echo "   Successful requests: $success_count"
    echo "   Failed requests: $((total_count - success_count))"
    echo ""
    
    if [ $success_count -gt 0 ]; then
        echo "‚úÖ Access requests submitted successfully!"
        echo ""
        echo "‚è≥ Note: Model access approval can take 1-24 hours."
        echo "   You can check status with:"
        echo "   aws bedrock list-model-access-requests --region ${region}"
        echo ""
        echo "üîÑ To refresh models in Nanobrowser:"
        echo "   1. Wait for approval emails from AWS"
        echo "   2. Reload the extension or refresh model list"
        echo "   3. New models should appear in the dropdown"
    else
        echo "‚ö†Ô∏è  No new access requests were submitted."
        echo "   This might mean access was already requested or granted."
    fi
    
    echo ""
    echo "üîç Post-provisioning status check:"
    check_access_requests
}

# Run main function
main

echo ""
echo "üéâ Provisioning script completed!"
echo "üìß Watch for AWS approval emails and check the Bedrock console for updates."
`;

  return script;
}

/**
 * Generate PowerShell script for Windows users
 */
export function generatePowerShellProvisioningScript(
  modelIds: string[],
  options: ProvisioningOptions = { region: 'us-west-2' },
): string {
  const { region, reason = 'Automated access request for Nanobrowser extension', dryRun = false } = options;

  const script = `# AWS Bedrock Model Access Provisioning Script (PowerShell)
# Generated by Nanobrowser Extension
# Date: ${new Date().toISOString()}

$ErrorActionPreference = "Stop"

Write-Host "üöÄ Starting AWS Bedrock model access provisioning..." -ForegroundColor Green
Write-Host "Region: ${region}" -ForegroundColor Cyan
Write-Host "Models to provision: ${modelIds.length}" -ForegroundColor Cyan
Write-Host ""

# Check AWS CLI installation
try {
    aws --version | Out-Null
    Write-Host "‚úÖ AWS CLI found" -ForegroundColor Green
} catch {
    Write-Host "‚ùå AWS CLI is not installed. Please install it first:" -ForegroundColor Red
    Write-Host "   https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html" -ForegroundColor Yellow
    exit 1
}

# Check AWS credentials
try {
    aws sts get-caller-identity | Out-Null
    Write-Host "‚úÖ AWS credentials verified" -ForegroundColor Green
} catch {
    Write-Host "‚ùå AWS credentials not configured. Please run 'aws configure' first." -ForegroundColor Red
    exit 1
}

Write-Host ""

# Function to request access for a single model
function Request-ModelAccess {
    param(
        [string]$ModelId
    )
    
    $provider = $ModelId.Split('.')[0]
    Write-Host "üìù Requesting access for: $ModelId" -ForegroundColor Yellow
    
    try {
        ${
          dryRun
            ? 'Write-Host "[DRY RUN] Would execute AWS CLI command" -ForegroundColor Magenta'
            : `
        $result = aws bedrock put-model-access-request \`
            --region "${region}" \`
            --model-id "$ModelId" \`
            --access-request-reason "${reason}" \`
            --output json 2>$null`
        }
        
        Write-Host "‚úÖ Access requested successfully for $ModelId" -ForegroundColor Green
        return $true
    } catch {
        Write-Host "‚ö†Ô∏è  Failed to request access for $ModelId (may already be requested)" -ForegroundColor Yellow
        return $false
    }
}

# Function to check current access status
function Check-AccessStatus {
    Write-Host "üîç Checking current model access status..." -ForegroundColor Cyan
    
    try {
        aws bedrock list-foundation-models \`
            --region "${region}" \`
            --output table \`
            --query 'modelSummaries[?contains(modelId, \`anthropic.claude-4\`) || contains(modelId, \`anthropic.claude-sonnet-4\`) || contains(modelId, \`anthropic.claude-haiku-4\`)].{ModelId:modelId,Status:modelLifecycle.status}' 2>$null
        Write-Host ""
    } catch {
        Write-Host "‚ö†Ô∏è  Could not retrieve model status" -ForegroundColor Yellow
    }
}

# Function to check model access requests
function Check-AccessRequests {
    Write-Host "üìã Checking pending access requests..." -ForegroundColor Cyan
    
    try {
        aws bedrock list-model-access-requests \`
            --region "${region}" \`
            --output table \`
            --query 'modelAccessRequestSummaries[?status==\`PENDING\`].{ModelId:modelId,Status:status,RequestTime:requestTime}' 2>$null
        Write-Host ""
    } catch {
        Write-Host "‚ö†Ô∏è  Could not retrieve access requests" -ForegroundColor Yellow
    }
}

# Main provisioning logic
Write-Host "üîç Pre-provisioning status check:" -ForegroundColor Cyan
Check-AccessStatus
Check-AccessRequests

Write-Host "üöÄ Starting model access provisioning..." -ForegroundColor Green
Write-Host ""

$successCount = 0
$totalCount = ${modelIds.length}

# Request access for each model
${modelIds.map(modelId => `if (Request-ModelAccess "${modelId}") { $successCount++ }`).join('\n')}

Write-Host ""
Write-Host "üìä Provisioning Summary:" -ForegroundColor Cyan
Write-Host "   Total models: $totalCount" -ForegroundColor White
Write-Host "   Successful requests: $successCount" -ForegroundColor Green
Write-Host "   Failed requests: $($totalCount - $successCount)" -ForegroundColor Yellow
Write-Host ""

if ($successCount -gt 0) {
    Write-Host "‚úÖ Access requests submitted successfully!" -ForegroundColor Green
    Write-Host ""
    Write-Host "‚è≥ Note: Model access approval can take 1-24 hours." -ForegroundColor Yellow
    Write-Host "   You can check status with:" -ForegroundColor Cyan
    Write-Host "   aws bedrock list-model-access-requests --region ${region}" -ForegroundColor White
    Write-Host ""
    Write-Host "üîÑ To refresh models in Nanobrowser:" -ForegroundColor Cyan
    Write-Host "   1. Wait for approval emails from AWS" -ForegroundColor White
    Write-Host "   2. Reload the extension or refresh model list" -ForegroundColor White
    Write-Host "   3. New models should appear in the dropdown" -ForegroundColor White
} else {
    Write-Host "‚ö†Ô∏è  No new access requests were submitted." -ForegroundColor Yellow
    Write-Host "   This might mean access was already requested or granted." -ForegroundColor White
}

Write-Host ""
Write-Host "üîç Post-provisioning status check:" -ForegroundColor Cyan
Check-AccessRequests

Write-Host ""
Write-Host "üéâ Provisioning script completed!" -ForegroundColor Green
Write-Host "üìß Watch for AWS approval emails and check the Bedrock console for updates." -ForegroundColor Cyan
`;

  return script;
}

/**
 * Generate step-by-step instructions for manual provisioning
 */
export function generateManualProvisioningInstructions(modelIds: string[], region: string = 'us-west-2'): string {
  return `# Manual AWS Bedrock Model Access Provisioning

## Prerequisites
1. AWS CLI installed and configured
2. AWS account with Bedrock permissions
3. Appropriate IAM permissions for model access requests

## Step-by-Step Instructions

### 1. Verify AWS Setup
\`\`\`bash
# Check AWS CLI installation
aws --version

# Verify credentials
aws sts get-caller-identity

# Check current region
aws configure get region
\`\`\`

### 2. Check Current Model Access
\`\`\`bash
# List currently available models
aws bedrock list-foundation-models --region ${region} --output table

# Check pending access requests
aws bedrock list-model-access-requests --region ${region} --output table
\`\`\`

### 3. Request Access for Each Model

${modelIds
  .map(
    modelId => `
#### ${modelId}
\`\`\`bash
aws bedrock put-model-access-request \\
  --region ${region} \\
  --model-id "${modelId}" \\
  --access-request-reason "Access needed for Nanobrowser AI extension"
\`\`\`
`,
  )
  .join('')}

### 4. Monitor Request Status
\`\`\`bash
# Check request status (repeat periodically)
aws bedrock list-model-access-requests --region ${region} --output table

# Filter for pending requests only
aws bedrock list-model-access-requests \\
  --region ${region} \\
  --query 'modelAccessRequestSummaries[?status==\`PENDING\`]' \\
  --output table
\`\`\`

### 5. Verify Access After Approval
\`\`\`bash
# List available models after approval
aws bedrock list-foundation-models \\
  --region ${region} \\
  --query 'modelSummaries[?contains(modelId, \`claude-4\`)]' \\
  --output table
\`\`\`

## Expected Timeline
- **Request submission**: Immediate
- **AWS review**: 1-24 hours (typically faster for established accounts)
- **Email notification**: Sent when approved/denied
- **Model availability**: Immediate after approval

## Troubleshooting

### Common Issues
1. **Permission denied**: Ensure your IAM user/role has \`bedrock:PutModelAccessRequest\` permission
2. **Model not found**: Verify the model ID and region availability
3. **Already requested**: Check existing requests with \`list-model-access-requests\`

### IAM Permissions Required
\`\`\`json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "bedrock:ListFoundationModels",
        "bedrock:ListModelAccessRequests",
        "bedrock:PutModelAccessRequest",
        "bedrock:GetModelAccessRequest"
      ],
      "Resource": "*"
    }
  ]
}
\`\`\`

## Next Steps
1. Wait for approval emails from AWS
2. Refresh the Nanobrowser extension model list
3. New models should appear in the dropdown
4. Test the models to ensure they work correctly
`;
}

/**
 * Create downloadable provisioning files
 */
export function createProvisioningFiles(
  modelIds: string[],
  options: ProvisioningOptions = { region: 'us-west-2' },
): { [filename: string]: string } {
  return {
    'provision-bedrock-access.sh': generateProvisioningScript(modelIds, options),
    'provision-bedrock-access.ps1': generatePowerShellProvisioningScript(modelIds, options),
    'manual-provisioning-instructions.md': generateManualProvisioningInstructions(modelIds, options.region),
    'dry-run-provision.sh': generateProvisioningScript(modelIds, { ...options, dryRun: true }),
  };
}
